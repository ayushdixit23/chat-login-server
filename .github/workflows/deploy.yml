name: Deploy to Google Cloud VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      run: |
        echo "Logging into Docker Hub..."
        echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        echo "Docker login successful!"

    # Build and push Docker image
    - name: Build and push Docker image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/login-chat:latest .
        echo "Docker image built successfully. Pushing to Docker Hub..."
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/login-chat:latest
        echo "Docker image pushed successfully!"

    # Set up SSH key
    - name: Setup SSH key
      run: |
        echo "Setting up SSH key..."
        mkdir -p ~/.ssh
        echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/gcp_ecdsa_key
        chmod 600 ~/.ssh/gcp_ecdsa_key
        ssh-keyscan ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts
        echo "SSH key setup complete!"


    # Deploy on GCP VM
    - name: Deploy on GCP VM
      run: |
        echo "Deploying to GCP VM..."
        ssh -i ~/.ssh/gcp_ecdsa_key ${{ secrets.GCP_VM_USERNAME }}@${{ secrets.GCP_VM_IP }} << 'EOF'
        set -e  # Exit on error

        # Navigate to the chat-deploy folder and load the .env file
        echo "Navigating to chat-deploy directory..."
        cd chat-deploy/

        # Load environment variables from the .env file
        echo "Loading environment variables from .env file..."
        export $(cat .env | grep -v ^# | xargs)

        # Print the environment variables to verify they are loaded correctly
        echo "Loaded environment variables:"
        echo "PORT_LOGIN_CHAT: $PORT_LOGIN_CHAT"
        echo "MONGO_URI: $MONGO_URI"
        echo "AWS_ACCESS_KEY: $AWS_ACCESS_KEY"
        echo "AWS_SECRET_KEY: $AWS_SECRET_KEY"
        echo "AWS_REGION: $AWS_REGION"
        echo "BUCKET_NAME: $BUCKET_NAME"
        echo "CLOUDFRONT_URL: $CLOUDFRONT_URL"
        echo "AMPQ_URL: $AMPQ_URL"
        echo "REDIS_URL: $REDIS_URL"

        # Ensure MongoDB container is running
        echo "Ensuring MongoDB container is running..."
        sudo docker ps -q --filter "name=mongo" | grep -q . || sudo docker run -d --name mongo --network backend mongo
        echo "MongoDB container is running or started!"

        # Stop and remove old login-chat container
        echo "Stopping and removing old login-chat container if exists..."
        sudo docker ps -q --filter "name=login-chat-server" | grep -q . && sudo docker stop login-chat-server && sudo docker rm login-chat-server
        echo "Old login-chat container stopped and removed if it existed."

        # Run new login-chat container with env variables loaded from .env
        echo "Starting new login-chat container..."
        sudo docker run -d \
          --name login-chat-server \
          --restart always \
          --network backend \
          -p $PORT_LOGIN_CHAT:$PORT_LOGIN_CHAT \
          -e PORT=$PORT_LOGIN_CHAT \
          -e MONGO_URI=$MONGO_URI \
          -e NODE_ENV=$NODE_ENV \
          -e JWT_SECRET_KEY=$JWT_SECRET_KEY \
          -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY \
          -e AWS_SECRET_KEY=$AWS_SECRET_KEY \
          -e AWS_REGION=$AWS_REGION \
          -e BUCKET_NAME=$BUCKET_NAME \
          -e CLOUDFRONT_URL=$CLOUDFRONT_URL \
          -e AMPQ_URL=$AMPQ_URL \
          -e REDIS_URL=$REDIS_URL \
          ${{ secrets.DOCKERHUB_USERNAME }}/login-chat:latest
        echo "New login-chat container started successfully!"
        EOF
        echo "Deployment to GCP VM completed!"
